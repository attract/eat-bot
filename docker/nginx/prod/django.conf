server {
    # NGINX INTERNAL IMAGE RESIZING SERVER.
    server_name localhost;
    listen 8888 default_server;
    root /app;

    # IMAGES RESIZE/CROP
    location ~* /media/files/(.*)$ {
        error_page 460 = @resize;
        error_page 461 = @crop;
        recursive_error_pages on;

        set $method "";

        if ( $arg_m ) {
            set $method $arg_m;
        }

        if ( $method = "crop" ) {
            # CROP METHOD
            return 461;
        }
        if ( $method = "resize" ) {
            # RESIZE METHOD by default
            return 460;
        }

        # if we have width or height in get params, then "resize" method

        set $w "-";
        set $h "-";

        if ( $arg_w ) {
            set $w $arg_w;
        }
        if ( $arg_h ) {
            set $h $arg_h;
        }
        if ( $w != "-" ) {
            # RESIZE METHOD
            return 460;
        }
        if ( $h != "-" ) {
            # RESIZE METHOD
            return 460;
        }
    }

    ############ IMAGE ACTIONS
    # image_filter_buffer         5M;

    ## RESIZE
    location @resize {
        # proxy_pass     http://127.0.0.1/media/files/$1;

        set $w "-";
        set $h "-";
        set $q "85";

        if ( $arg_w ) {
            set $w $arg_w;
        }
        if ( $arg_h ) {
            set $h $arg_h;
        }
        if ( $arg_q ) {
            set $q $arg_q;
        }

        set $demins "_${w}_${h}";
        set $image_path "$1";

        image_filter                resize $w $h;

        image_filter_jpeg_quality   $q;
        image_filter_buffer         5M;
        image_filter_interlace      on;

        proxy_temp_path      /tmp/nginx-tmp;
        proxy_set_header     Host $host;

        access_log off;
        expires 7d;
    }
    ## CROP
    location @crop {
        # proxy_pass     http://127.0.0.1/media/files/$1;
        set $w "-";
        set $h "-";
        set $q "85";

        if ( $arg_w ) {
            set $w $arg_w;
        }
        if ( $arg_h ) {
            set $h $arg_h;
        }
        if ( $arg_q ) {
            set $q $arg_q;
        }

        set $demins "_${w}_${h}";
        set $image_path "$1";

        image_filter                crop $w $h;

        image_filter_jpeg_quality   $q;
        image_filter_buffer         5M;
        image_filter_interlace      on;

        proxy_temp_path      /tmp/nginx-tmp;
        proxy_set_header     Host $host;

        access_log off;
        expires 7d;
    }

    location ~* ^.+\.(js|css|png|jpg|jpeg|gif|ico|htm|html|woff|ttf|svg)$ {
	    access_log        off;
        expires           7d;
	}

}

proxy_cache_path /tmp/nginx_images_cache/ levels=1:2 keys_zone=nginx_images_cache:10m inactive=24h max_size=500m;


server {
    listen 80 default_server;
    listen 443 ssl;

    server_name eatbot.com;

    charset     utf-8;
    image_filter_buffer 5M;

    gzip on;
    gzip_disable "msie6";
    gzip_buffers 16 8k;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/x-javascript application/javascript application/xml application/atom+xml text/javascript
              font/ttf application/x-font-ttf application/font-woff application/font-woff2 application/x-web-app-manifest+json
              application/xhtml+xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/vcard
              text/vnd.rim.location.xloc text/vnd.wap.wml text/vtt text/x-component text/x-cross-domain-policy;
    gzip_comp_level 5;
    gzip_vary on;

    client_max_body_size 100m;

    # ssl_certificate /app/media_private/ssl-certificates/eatbot.CRT;
    # ssl_certificate_key /app/media_private/ssl-certificates/eatbot.KEY;

    root /app;
    #index index.php index.html index.htm;

    location ~* \.(etf|ttf|woff)$ {
       add_header Access-Control-Allow-Origin *;
    }

    location /(img|fonts|assets|css|uploads) {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
    }

    location = / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://upstream_django;
    }

    location / {

        try_files $uri $uri/ @proxy_to_app;

        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, HEAD, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Origin,Referer,X-Csrf-Token,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 200;
        }
    }

    # django
    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://upstream_django;
    }

    # NGINX IMAGE RESIZE
    location ~* /media/files/(.*)$ {
        # Proxy to internal image resizing server.
        proxy_pass http://127.0.0.1:8888/media/files/$1$is_args$args;
        proxy_redirect off;

        # caching resized images
        proxy_cache nginx_images_cache;
        proxy_cache_valid 200 24h;
    }

    location ~* ^.+\.(js|css|png|jpg|jpeg|gif|ico|htm|html|woff|ttf|svg)$ {
	    access_log        off;
        expires           7d;
	}
}

upstream upstream_django {
    server django:5000;
}
